/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __FlashStringHelper {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct String {
    pub buffer: *mut ::core::ffi::c_char,
    pub capacity: ::core::ffi::c_uint,
    pub len: ::core::ffi::c_uint,
}
pub type String_StringIfHelperType = [u8; 4usize];
extern "C" {
    #[link_name = "\u{1}_ZN6String7reserveEj"]
    pub fn String_reserve(
        this: *mut String,
        size: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatERKS_"]
    pub fn String_concat(this: *mut String, str_: *const String) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEPKc"]
    pub fn String_concat1(
        this: *mut String,
        cstr: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEc"]
    pub fn String_concat2(
        this: *mut String,
        c: ::core::ffi::c_char,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEh"]
    pub fn String_concat3(
        this: *mut String,
        c: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEi"]
    pub fn String_concat4(
        this: *mut String,
        num: ::core::ffi::c_int,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEj"]
    pub fn String_concat5(
        this: *mut String,
        num: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEl"]
    pub fn String_concat6(
        this: *mut String,
        num: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEm"]
    pub fn String_concat7(
        this: *mut String,
        num: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEf"]
    pub fn String_concat8(this: *mut String, num: f32) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEd"]
    pub fn String_concat9(this: *mut String, num: f64) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEPK19__FlashStringHelper"]
    pub fn String_concat10(
        this: *mut String,
        str_: *const __FlashStringHelper,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String9compareToERKS_"]
    pub fn String_compareTo(this: *const String, s: *const String) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String6equalsERKS_"]
    pub fn String_equals(this: *const String, s: *const String) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String6equalsEPKc"]
    pub fn String_equals1(
        this: *const String,
        cstr: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String16equalsIgnoreCaseERKS_"]
    pub fn String_equalsIgnoreCase(
        this: *const String,
        s: *const String,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String10startsWithERKS_"]
    pub fn String_startsWith(
        this: *const String,
        prefix: *const String,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String10startsWithERKS_j"]
    pub fn String_startsWith1(
        this: *const String,
        prefix: *const String,
        offset: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String8endsWithERKS_"]
    pub fn String_endsWith(
        this: *const String,
        suffix: *const String,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String6charAtEj"]
    pub fn String_charAt(
        this: *const String,
        index: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String9setCharAtEjc"]
    pub fn String_setCharAt(
        this: *mut String,
        index: ::core::ffi::c_uint,
        c: ::core::ffi::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String8getBytesEPhjj"]
    pub fn String_getBytes(
        this: *const String,
        buf: *mut ::core::ffi::c_uchar,
        bufsize: ::core::ffi::c_uint,
        index: ::core::ffi::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String7indexOfEc"]
    pub fn String_indexOf(
        this: *const String,
        ch: ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String7indexOfEcj"]
    pub fn String_indexOf1(
        this: *const String,
        ch: ::core::ffi::c_char,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String7indexOfERKS_"]
    pub fn String_indexOf2(
        this: *const String,
        str_: *const String,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String7indexOfERKS_j"]
    pub fn String_indexOf3(
        this: *const String,
        str_: *const String,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String11lastIndexOfEc"]
    pub fn String_lastIndexOf(
        this: *const String,
        ch: ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String11lastIndexOfEcj"]
    pub fn String_lastIndexOf1(
        this: *const String,
        ch: ::core::ffi::c_char,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String11lastIndexOfERKS_"]
    pub fn String_lastIndexOf2(
        this: *const String,
        str_: *const String,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String11lastIndexOfERKS_j"]
    pub fn String_lastIndexOf3(
        this: *const String,
        str_: *const String,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String9substringEjj"]
    pub fn String_substring(
        this: *const String,
        beginIndex: ::core::ffi::c_uint,
        endIndex: ::core::ffi::c_uint,
    ) -> String;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String7replaceEcc"]
    pub fn String_replace(
        this: *mut String,
        find: ::core::ffi::c_char,
        replace: ::core::ffi::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6String7replaceERKS_S1_"]
    pub fn String_replace1(
        this: *mut String,
        find: *const String,
        replace: *const String,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6removeEj"]
    pub fn String_remove(this: *mut String, index: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6removeEjj"]
    pub fn String_remove1(
        this: *mut String,
        index: ::core::ffi::c_uint,
        count: ::core::ffi::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6String11toLowerCaseEv"]
    pub fn String_toLowerCase(this: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6String11toUpperCaseEv"]
    pub fn String_toUpperCase(this: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6String4trimEv"]
    pub fn String_trim(this: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String5toIntEv"]
    pub fn String_toInt(this: *const String) -> ::core::ffi::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String7toFloatEv"]
    pub fn String_toFloat(this: *const String) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK6String8toDoubleEv"]
    pub fn String_toDouble(this: *const String) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String4initEv"]
    pub fn String_init(this: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6String10invalidateEv"]
    pub fn String_invalidate(this: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6String12changeBufferEj"]
    pub fn String_changeBuffer(
        this: *mut String,
        maxStrLen: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String6concatEPKcj"]
    pub fn String_concat11(
        this: *mut String,
        cstr: *const ::core::ffi::c_char,
        length: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String4copyEPKcj"]
    pub fn String_copy(
        this: *mut String,
        cstr: *const ::core::ffi::c_char,
        length: ::core::ffi::c_uint,
    ) -> *mut String;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String4copyEPK19__FlashStringHelperj"]
    pub fn String_copy1(
        this: *mut String,
        pstr: *const __FlashStringHelper,
        length: ::core::ffi::c_uint,
    ) -> *mut String;
}
extern "C" {
    #[link_name = "\u{1}_ZN6String4moveERS_"]
    pub fn String_move(this: *mut String, rhs: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1EPKc"]
    pub fn String_String(this: *mut String, cstr: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1ERKS_"]
    pub fn String_String1(this: *mut String, str_: *const String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1EPK19__FlashStringHelper"]
    pub fn String_String2(this: *mut String, str_: *const __FlashStringHelper);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1EOS_"]
    pub fn String_String3(this: *mut String, rval: *mut String);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1EO15StringSumHelper"]
    pub fn String_String4(this: *mut String, rval: *mut StringSumHelper);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Ec"]
    pub fn String_String5(this: *mut String, c: ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Ehh"]
    pub fn String_String6(
        this: *mut String,
        arg1: ::core::ffi::c_uchar,
        base: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Eih"]
    pub fn String_String7(
        this: *mut String,
        arg1: ::core::ffi::c_int,
        base: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Ejh"]
    pub fn String_String8(
        this: *mut String,
        arg1: ::core::ffi::c_uint,
        base: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Elh"]
    pub fn String_String9(
        this: *mut String,
        arg1: ::core::ffi::c_long,
        base: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Emh"]
    pub fn String_String10(
        this: *mut String,
        arg1: ::core::ffi::c_ulong,
        base: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Efh"]
    pub fn String_String11(
        this: *mut String,
        arg1: f32,
        decimalPlaces: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringC1Edh"]
    pub fn String_String12(
        this: *mut String,
        arg1: f64,
        decimalPlaces: ::core::ffi::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6StringD1Ev"]
    pub fn String_String_destructor(this: *mut String);
}
impl String {
    #[inline]
    pub unsafe fn reserve(&mut self, size: ::core::ffi::c_uint) -> ::core::ffi::c_uchar {
        String_reserve(self, size)
    }
    #[inline]
    pub unsafe fn concat(&mut self, str_: *const String) -> ::core::ffi::c_uchar {
        String_concat(self, str_)
    }
    #[inline]
    pub unsafe fn concat1(
        &mut self,
        cstr: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uchar {
        String_concat1(self, cstr)
    }
    #[inline]
    pub unsafe fn concat2(&mut self, c: ::core::ffi::c_char) -> ::core::ffi::c_uchar {
        String_concat2(self, c)
    }
    #[inline]
    pub unsafe fn concat3(&mut self, c: ::core::ffi::c_uchar) -> ::core::ffi::c_uchar {
        String_concat3(self, c)
    }
    #[inline]
    pub unsafe fn concat4(&mut self, num: ::core::ffi::c_int) -> ::core::ffi::c_uchar {
        String_concat4(self, num)
    }
    #[inline]
    pub unsafe fn concat5(&mut self, num: ::core::ffi::c_uint) -> ::core::ffi::c_uchar {
        String_concat5(self, num)
    }
    #[inline]
    pub unsafe fn concat6(&mut self, num: ::core::ffi::c_long) -> ::core::ffi::c_uchar {
        String_concat6(self, num)
    }
    #[inline]
    pub unsafe fn concat7(&mut self, num: ::core::ffi::c_ulong) -> ::core::ffi::c_uchar {
        String_concat7(self, num)
    }
    #[inline]
    pub unsafe fn concat8(&mut self, num: f32) -> ::core::ffi::c_uchar {
        String_concat8(self, num)
    }
    #[inline]
    pub unsafe fn concat9(&mut self, num: f64) -> ::core::ffi::c_uchar {
        String_concat9(self, num)
    }
    #[inline]
    pub unsafe fn concat10(
        &mut self,
        str_: *const __FlashStringHelper,
    ) -> ::core::ffi::c_uchar {
        String_concat10(self, str_)
    }
    #[inline]
    pub unsafe fn compareTo(&self, s: *const String) -> ::core::ffi::c_int {
        String_compareTo(self, s)
    }
    #[inline]
    pub unsafe fn equals(&self, s: *const String) -> ::core::ffi::c_uchar {
        String_equals(self, s)
    }
    #[inline]
    pub unsafe fn equals1(
        &self,
        cstr: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uchar {
        String_equals1(self, cstr)
    }
    #[inline]
    pub unsafe fn equalsIgnoreCase(&self, s: *const String) -> ::core::ffi::c_uchar {
        String_equalsIgnoreCase(self, s)
    }
    #[inline]
    pub unsafe fn startsWith(&self, prefix: *const String) -> ::core::ffi::c_uchar {
        String_startsWith(self, prefix)
    }
    #[inline]
    pub unsafe fn startsWith1(
        &self,
        prefix: *const String,
        offset: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar {
        String_startsWith1(self, prefix, offset)
    }
    #[inline]
    pub unsafe fn endsWith(&self, suffix: *const String) -> ::core::ffi::c_uchar {
        String_endsWith(self, suffix)
    }
    #[inline]
    pub unsafe fn charAt(&self, index: ::core::ffi::c_uint) -> ::core::ffi::c_char {
        String_charAt(self, index)
    }
    #[inline]
    pub unsafe fn setCharAt(
        &mut self,
        index: ::core::ffi::c_uint,
        c: ::core::ffi::c_char,
    ) {
        String_setCharAt(self, index, c)
    }
    #[inline]
    pub unsafe fn getBytes(
        &self,
        buf: *mut ::core::ffi::c_uchar,
        bufsize: ::core::ffi::c_uint,
        index: ::core::ffi::c_uint,
    ) {
        String_getBytes(self, buf, bufsize, index)
    }
    #[inline]
    pub unsafe fn indexOf(&self, ch: ::core::ffi::c_char) -> ::core::ffi::c_int {
        String_indexOf(self, ch)
    }
    #[inline]
    pub unsafe fn indexOf1(
        &self,
        ch: ::core::ffi::c_char,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int {
        String_indexOf1(self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn indexOf2(&self, str_: *const String) -> ::core::ffi::c_int {
        String_indexOf2(self, str_)
    }
    #[inline]
    pub unsafe fn indexOf3(
        &self,
        str_: *const String,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int {
        String_indexOf3(self, str_, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf(&self, ch: ::core::ffi::c_char) -> ::core::ffi::c_int {
        String_lastIndexOf(self, ch)
    }
    #[inline]
    pub unsafe fn lastIndexOf1(
        &self,
        ch: ::core::ffi::c_char,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int {
        String_lastIndexOf1(self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf2(&self, str_: *const String) -> ::core::ffi::c_int {
        String_lastIndexOf2(self, str_)
    }
    #[inline]
    pub unsafe fn lastIndexOf3(
        &self,
        str_: *const String,
        fromIndex: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int {
        String_lastIndexOf3(self, str_, fromIndex)
    }
    #[inline]
    pub unsafe fn substring(
        &self,
        beginIndex: ::core::ffi::c_uint,
        endIndex: ::core::ffi::c_uint,
    ) -> String {
        String_substring(self, beginIndex, endIndex)
    }
    #[inline]
    pub unsafe fn replace(
        &mut self,
        find: ::core::ffi::c_char,
        replace: ::core::ffi::c_char,
    ) {
        String_replace(self, find, replace)
    }
    #[inline]
    pub unsafe fn replace1(&mut self, find: *const String, replace: *const String) {
        String_replace1(self, find, replace)
    }
    #[inline]
    pub unsafe fn remove(&mut self, index: ::core::ffi::c_uint) {
        String_remove(self, index)
    }
    #[inline]
    pub unsafe fn remove1(
        &mut self,
        index: ::core::ffi::c_uint,
        count: ::core::ffi::c_uint,
    ) {
        String_remove1(self, index, count)
    }
    #[inline]
    pub unsafe fn toLowerCase(&mut self) {
        String_toLowerCase(self)
    }
    #[inline]
    pub unsafe fn toUpperCase(&mut self) {
        String_toUpperCase(self)
    }
    #[inline]
    pub unsafe fn trim(&mut self) {
        String_trim(self)
    }
    #[inline]
    pub unsafe fn toInt(&self) -> ::core::ffi::c_long {
        String_toInt(self)
    }
    #[inline]
    pub unsafe fn toFloat(&self) -> f32 {
        String_toFloat(self)
    }
    #[inline]
    pub unsafe fn toDouble(&self) -> f64 {
        String_toDouble(self)
    }
    #[inline]
    pub unsafe fn init(&mut self) {
        String_init(self)
    }
    #[inline]
    pub unsafe fn invalidate(&mut self) {
        String_invalidate(self)
    }
    #[inline]
    pub unsafe fn changeBuffer(
        &mut self,
        maxStrLen: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar {
        String_changeBuffer(self, maxStrLen)
    }
    #[inline]
    pub unsafe fn concat11(
        &mut self,
        cstr: *const ::core::ffi::c_char,
        length: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uchar {
        String_concat11(self, cstr, length)
    }
    #[inline]
    pub unsafe fn copy(
        &mut self,
        cstr: *const ::core::ffi::c_char,
        length: ::core::ffi::c_uint,
    ) -> *mut String {
        String_copy(self, cstr, length)
    }
    #[inline]
    pub unsafe fn copy1(
        &mut self,
        pstr: *const __FlashStringHelper,
        length: ::core::ffi::c_uint,
    ) -> *mut String {
        String_copy1(self, pstr, length)
    }
    #[inline]
    pub unsafe fn move_(&mut self, rhs: *mut String) {
        String_move(self, rhs)
    }
    #[inline]
    pub unsafe fn new(cstr: *const ::core::ffi::c_char) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String(__bindgen_tmp.as_mut_ptr(), cstr);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(str_: *const String) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String1(__bindgen_tmp.as_mut_ptr(), str_);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(str_: *const __FlashStringHelper) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String2(__bindgen_tmp.as_mut_ptr(), str_);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(rval: *mut String) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String3(__bindgen_tmp.as_mut_ptr(), rval);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(rval: *mut StringSumHelper) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String4(__bindgen_tmp.as_mut_ptr(), rval);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(c: ::core::ffi::c_char) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String5(__bindgen_tmp.as_mut_ptr(), c);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(arg1: ::core::ffi::c_uchar, base: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String6(__bindgen_tmp.as_mut_ptr(), arg1, base);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(arg1: ::core::ffi::c_int, base: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String7(__bindgen_tmp.as_mut_ptr(), arg1, base);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(arg1: ::core::ffi::c_uint, base: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String8(__bindgen_tmp.as_mut_ptr(), arg1, base);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(arg1: ::core::ffi::c_long, base: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String9(__bindgen_tmp.as_mut_ptr(), arg1, base);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(arg1: ::core::ffi::c_ulong, base: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String10(__bindgen_tmp.as_mut_ptr(), arg1, base);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new11(arg1: f32, decimalPlaces: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String11(__bindgen_tmp.as_mut_ptr(), arg1, decimalPlaces);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new12(arg1: f64, decimalPlaces: ::core::ffi::c_uchar) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        String_String12(__bindgen_tmp.as_mut_ptr(), arg1, decimalPlaces);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        String_String_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct StringSumHelper {
    pub _base: String,
}
#[repr(C)]
pub struct Printable__bindgen_vtable(::core::ffi::c_void);
/** The Printable class provides a way for new classes to allow themselves to be printed.
By deriving from Printable and implementing the printTo method, it will then be possible
for users to print out instances of this class by passing them into the usual
Print::print and Print::println methods.*/
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Printable {
    pub vtable_: *const Printable__bindgen_vtable,
}
#[repr(C)]
pub struct Print__bindgen_vtable(::core::ffi::c_void);
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Print {
    pub vtable_: *const Print__bindgen_vtable,
    pub write_error: ::core::ffi::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEPK19__FlashStringHelper"]
    pub fn Print_print(this: *mut Print, arg1: *const __FlashStringHelper) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printERK6String"]
    pub fn Print_print1(this: *mut Print, arg1: *const String) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEPKc"]
    pub fn Print_print2(this: *mut Print, arg1: *const ::core::ffi::c_char) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEc"]
    pub fn Print_print3(this: *mut Print, arg1: ::core::ffi::c_char) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEhi"]
    pub fn Print_print4(
        this: *mut Print,
        arg1: ::core::ffi::c_uchar,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEii"]
    pub fn Print_print5(
        this: *mut Print,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEji"]
    pub fn Print_print6(
        this: *mut Print,
        arg1: ::core::ffi::c_uint,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEli"]
    pub fn Print_print7(
        this: *mut Print,
        arg1: ::core::ffi::c_long,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEmi"]
    pub fn Print_print8(
        this: *mut Print,
        arg1: ::core::ffi::c_ulong,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printEdi"]
    pub fn Print_print9(this: *mut Print, arg1: f64, arg2: ::core::ffi::c_int) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5printERK9Printable"]
    pub fn Print_print10(this: *mut Print, arg1: *const Printable) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEPK19__FlashStringHelper"]
    pub fn Print_println(this: *mut Print, arg1: *const __FlashStringHelper) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnERK6String"]
    pub fn Print_println1(this: *mut Print, s: *const String) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEPKc"]
    pub fn Print_println2(this: *mut Print, arg1: *const ::core::ffi::c_char) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEc"]
    pub fn Print_println3(this: *mut Print, arg1: ::core::ffi::c_char) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEhi"]
    pub fn Print_println4(
        this: *mut Print,
        arg1: ::core::ffi::c_uchar,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEii"]
    pub fn Print_println5(
        this: *mut Print,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEji"]
    pub fn Print_println6(
        this: *mut Print,
        arg1: ::core::ffi::c_uint,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEli"]
    pub fn Print_println7(
        this: *mut Print,
        arg1: ::core::ffi::c_long,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEmi"]
    pub fn Print_println8(
        this: *mut Print,
        arg1: ::core::ffi::c_ulong,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEdi"]
    pub fn Print_println9(
        this: *mut Print,
        arg1: f64,
        arg2: ::core::ffi::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnERK9Printable"]
    pub fn Print_println10(this: *mut Print, arg1: *const Printable) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print7printlnEv"]
    pub fn Print_println11(this: *mut Print) -> usize;
}
impl Print {
    #[inline]
    pub unsafe fn print(&mut self, arg1: *const __FlashStringHelper) -> usize {
        Print_print(self, arg1)
    }
    #[inline]
    pub unsafe fn print1(&mut self, arg1: *const String) -> usize {
        Print_print1(self, arg1)
    }
    #[inline]
    pub unsafe fn print2(&mut self, arg1: *const ::core::ffi::c_char) -> usize {
        Print_print2(self, arg1)
    }
    #[inline]
    pub unsafe fn print3(&mut self, arg1: ::core::ffi::c_char) -> usize {
        Print_print3(self, arg1)
    }
    #[inline]
    pub unsafe fn print4(
        &mut self,
        arg1: ::core::ffi::c_uchar,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_print4(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print5(
        &mut self,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_print5(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print6(
        &mut self,
        arg1: ::core::ffi::c_uint,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_print6(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print7(
        &mut self,
        arg1: ::core::ffi::c_long,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_print7(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print8(
        &mut self,
        arg1: ::core::ffi::c_ulong,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_print8(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print9(&mut self, arg1: f64, arg2: ::core::ffi::c_int) -> usize {
        Print_print9(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print10(&mut self, arg1: *const Printable) -> usize {
        Print_print10(self, arg1)
    }
    #[inline]
    pub unsafe fn println(&mut self, arg1: *const __FlashStringHelper) -> usize {
        Print_println(self, arg1)
    }
    #[inline]
    pub unsafe fn println1(&mut self, s: *const String) -> usize {
        Print_println1(self, s)
    }
    #[inline]
    pub unsafe fn println2(&mut self, arg1: *const ::core::ffi::c_char) -> usize {
        Print_println2(self, arg1)
    }
    #[inline]
    pub unsafe fn println3(&mut self, arg1: ::core::ffi::c_char) -> usize {
        Print_println3(self, arg1)
    }
    #[inline]
    pub unsafe fn println4(
        &mut self,
        arg1: ::core::ffi::c_uchar,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_println4(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println5(
        &mut self,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_println5(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println6(
        &mut self,
        arg1: ::core::ffi::c_uint,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_println6(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println7(
        &mut self,
        arg1: ::core::ffi::c_long,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_println7(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println8(
        &mut self,
        arg1: ::core::ffi::c_ulong,
        arg2: ::core::ffi::c_int,
    ) -> usize {
        Print_println8(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println9(&mut self, arg1: f64, arg2: ::core::ffi::c_int) -> usize {
        Print_println9(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn println10(&mut self, arg1: *const Printable) -> usize {
        Print_println10(self, arg1)
    }
    #[inline]
    pub unsafe fn println11(&mut self) -> usize {
        Print_println11(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5Print5writeEPKhj"]
    pub fn Print_write1(
        this: *mut ::core::ffi::c_void,
        buffer: *const u8,
        size: usize,
    ) -> usize;
}
pub const LookaheadMode_SKIP_ALL: LookaheadMode = 0;
pub const LookaheadMode_SKIP_NONE: LookaheadMode = 1;
pub const LookaheadMode_SKIP_WHITESPACE: LookaheadMode = 2;
pub type LookaheadMode = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Stream {
    pub _base: Print,
    pub _timeout: ::core::ffi::c_ulong,
    pub _startMillis: ::core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Stream_MultiTarget {
    pub str_: *const ::core::ffi::c_char,
    pub len: usize,
    pub index: usize,
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9timedReadEv"]
    pub fn Stream_timedRead(this: *mut Stream) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9timedPeekEv"]
    pub fn Stream_timedPeek(this: *mut Stream) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream13peekNextDigitE13LookaheadModeb"]
    pub fn Stream_peekNextDigit(
        this: *mut Stream,
        lookahead: LookaheadMode,
        detectDecimal: bool,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream10setTimeoutEm"]
    pub fn Stream_setTimeout(this: *mut Stream, timeout: ::core::ffi::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream4findEPc"]
    pub fn Stream_find(this: *mut Stream, target: *mut ::core::ffi::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream4findEPcj"]
    pub fn Stream_find1(
        this: *mut Stream,
        target: *mut ::core::ffi::c_char,
        length: usize,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9findUntilEPcS0_"]
    pub fn Stream_findUntil(
        this: *mut Stream,
        target: *mut ::core::ffi::c_char,
        terminator: *mut ::core::ffi::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9findUntilEPcjS0_j"]
    pub fn Stream_findUntil1(
        this: *mut Stream,
        target: *mut ::core::ffi::c_char,
        targetLen: usize,
        terminate: *mut ::core::ffi::c_char,
        termLen: usize,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream8parseIntE13LookaheadModec"]
    pub fn Stream_parseInt(
        this: *mut Stream,
        lookahead: LookaheadMode,
        ignore: ::core::ffi::c_char,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream10parseFloatE13LookaheadModec"]
    pub fn Stream_parseFloat(
        this: *mut Stream,
        lookahead: LookaheadMode,
        ignore: ::core::ffi::c_char,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9readBytesEPcj"]
    pub fn Stream_readBytes(
        this: *mut Stream,
        buffer: *mut ::core::ffi::c_char,
        length: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream14readBytesUntilEcPcj"]
    pub fn Stream_readBytesUntil(
        this: *mut Stream,
        terminator: ::core::ffi::c_char,
        buffer: *mut ::core::ffi::c_char,
        length: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream10readStringEv"]
    pub fn Stream_readString(this: *mut Stream) -> String;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream15readStringUntilEc"]
    pub fn Stream_readStringUntil(
        this: *mut Stream,
        terminator: ::core::ffi::c_char,
    ) -> String;
}
extern "C" {
    #[link_name = "\u{1}_ZN6Stream9findMultiEPNS_11MultiTargetEi"]
    pub fn Stream_findMulti(
        this: *mut Stream,
        targets: *mut Stream_MultiTarget,
        tCount: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
impl Stream {
    #[inline]
    pub unsafe fn timedRead(&mut self) -> ::core::ffi::c_int {
        Stream_timedRead(self)
    }
    #[inline]
    pub unsafe fn timedPeek(&mut self) -> ::core::ffi::c_int {
        Stream_timedPeek(self)
    }
    #[inline]
    pub unsafe fn peekNextDigit(
        &mut self,
        lookahead: LookaheadMode,
        detectDecimal: bool,
    ) -> ::core::ffi::c_int {
        Stream_peekNextDigit(self, lookahead, detectDecimal)
    }
    #[inline]
    pub unsafe fn setTimeout(&mut self, timeout: ::core::ffi::c_ulong) {
        Stream_setTimeout(self, timeout)
    }
    #[inline]
    pub unsafe fn find(&mut self, target: *mut ::core::ffi::c_char) -> bool {
        Stream_find(self, target)
    }
    #[inline]
    pub unsafe fn find1(
        &mut self,
        target: *mut ::core::ffi::c_char,
        length: usize,
    ) -> bool {
        Stream_find1(self, target, length)
    }
    #[inline]
    pub unsafe fn findUntil(
        &mut self,
        target: *mut ::core::ffi::c_char,
        terminator: *mut ::core::ffi::c_char,
    ) -> bool {
        Stream_findUntil(self, target, terminator)
    }
    #[inline]
    pub unsafe fn findUntil1(
        &mut self,
        target: *mut ::core::ffi::c_char,
        targetLen: usize,
        terminate: *mut ::core::ffi::c_char,
        termLen: usize,
    ) -> bool {
        Stream_findUntil1(self, target, targetLen, terminate, termLen)
    }
    #[inline]
    pub unsafe fn parseInt(
        &mut self,
        lookahead: LookaheadMode,
        ignore: ::core::ffi::c_char,
    ) -> ::core::ffi::c_long {
        Stream_parseInt(self, lookahead, ignore)
    }
    #[inline]
    pub unsafe fn parseFloat(
        &mut self,
        lookahead: LookaheadMode,
        ignore: ::core::ffi::c_char,
    ) -> f32 {
        Stream_parseFloat(self, lookahead, ignore)
    }
    #[inline]
    pub unsafe fn readBytes(
        &mut self,
        buffer: *mut ::core::ffi::c_char,
        length: usize,
    ) -> usize {
        Stream_readBytes(self, buffer, length)
    }
    #[inline]
    pub unsafe fn readBytesUntil(
        &mut self,
        terminator: ::core::ffi::c_char,
        buffer: *mut ::core::ffi::c_char,
        length: usize,
    ) -> usize {
        Stream_readBytesUntil(self, terminator, buffer, length)
    }
    #[inline]
    pub unsafe fn readString(&mut self) -> String {
        Stream_readString(self)
    }
    #[inline]
    pub unsafe fn readStringUntil(&mut self, terminator: ::core::ffi::c_char) -> String {
        Stream_readStringUntil(self, terminator)
    }
    #[inline]
    pub unsafe fn findMulti(
        &mut self,
        targets: *mut Stream_MultiTarget,
        tCount: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int {
        Stream_findMulti(self, targets, tCount)
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TwoWire {
    pub _base: Stream,
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire8rxBufferE"]
    pub static mut TwoWire_rxBuffer: [u8; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire13rxBufferIndexE"]
    pub static mut TwoWire_rxBufferIndex: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire14rxBufferLengthE"]
    pub static mut TwoWire_rxBufferLength: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire9txAddressE"]
    pub static mut TwoWire_txAddress: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire8txBufferE"]
    pub static mut TwoWire_txBuffer: [u8; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire13txBufferIndexE"]
    pub static mut TwoWire_txBufferIndex: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire14txBufferLengthE"]
    pub static mut TwoWire_txBufferLength: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire12transmittingE"]
    pub static mut TwoWire_transmitting: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire14user_onRequestE"]
    pub static mut TwoWire_user_onRequest: ::core::option::Option<
        unsafe extern "C" fn(),
    >;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire14user_onReceiveE"]
    pub static mut TwoWire_user_onReceive: ::core::option::Option<
        unsafe extern "C" fn(arg1: ::core::ffi::c_int),
    >;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5beginEv"]
    pub fn TwoWire_begin(this: *mut TwoWire);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5beginEh"]
    pub fn TwoWire_begin1(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5beginEi"]
    pub fn TwoWire_begin2(this: *mut TwoWire, arg1: ::core::ffi::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire3endEv"]
    pub fn TwoWire_end(this: *mut TwoWire);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire8setClockEm"]
    pub fn TwoWire_setClock(this: *mut TwoWire, arg1: u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire14setWireTimeoutEmb"]
    pub fn TwoWire_setWireTimeout(
        this: *mut TwoWire,
        timeout: u32,
        reset_with_timeout: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire18getWireTimeoutFlagEv"]
    pub fn TwoWire_getWireTimeoutFlag(this: *mut TwoWire) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire20clearWireTimeoutFlagEv"]
    pub fn TwoWire_clearWireTimeoutFlag(this: *mut TwoWire);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire17beginTransmissionEh"]
    pub fn TwoWire_beginTransmission(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire17beginTransmissionEi"]
    pub fn TwoWire_beginTransmission1(this: *mut TwoWire, arg1: ::core::ffi::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire15endTransmissionEv"]
    pub fn TwoWire_endTransmission(this: *mut TwoWire) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire15endTransmissionEh"]
    pub fn TwoWire_endTransmission1(this: *mut TwoWire, arg1: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire11requestFromEhh"]
    pub fn TwoWire_requestFrom(this: *mut TwoWire, arg1: u8, arg2: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire11requestFromEhhh"]
    pub fn TwoWire_requestFrom1(this: *mut TwoWire, arg1: u8, arg2: u8, arg3: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire11requestFromEhhmhh"]
    pub fn TwoWire_requestFrom2(
        this: *mut TwoWire,
        arg1: u8,
        arg2: u8,
        arg3: u32,
        arg4: u8,
        arg5: u8,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire11requestFromEii"]
    pub fn TwoWire_requestFrom3(
        this: *mut TwoWire,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire11requestFromEiii"]
    pub fn TwoWire_requestFrom4(
        this: *mut TwoWire,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire9onReceiveEPFviE"]
    pub fn TwoWire_onReceive(
        this: *mut TwoWire,
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire9onRequestEPFvvE"]
    pub fn TwoWire_onRequest(
        this: *mut TwoWire,
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWireC1Ev"]
    pub fn TwoWire_TwoWire(this: *mut TwoWire);
}
impl TwoWire {
    #[inline]
    pub unsafe fn begin(&mut self) {
        TwoWire_begin(self)
    }
    #[inline]
    pub unsafe fn begin1(&mut self, arg1: u8) {
        TwoWire_begin1(self, arg1)
    }
    #[inline]
    pub unsafe fn begin2(&mut self, arg1: ::core::ffi::c_int) {
        TwoWire_begin2(self, arg1)
    }
    #[inline]
    pub unsafe fn end(&mut self) {
        TwoWire_end(self)
    }
    #[inline]
    pub unsafe fn setClock(&mut self, arg1: u32) {
        TwoWire_setClock(self, arg1)
    }
    #[inline]
    pub unsafe fn setWireTimeout(&mut self, timeout: u32, reset_with_timeout: bool) {
        TwoWire_setWireTimeout(self, timeout, reset_with_timeout)
    }
    #[inline]
    pub unsafe fn getWireTimeoutFlag(&mut self) -> bool {
        TwoWire_getWireTimeoutFlag(self)
    }
    #[inline]
    pub unsafe fn clearWireTimeoutFlag(&mut self) {
        TwoWire_clearWireTimeoutFlag(self)
    }
    #[inline]
    pub unsafe fn beginTransmission(&mut self, arg1: u8) {
        TwoWire_beginTransmission(self, arg1)
    }
    #[inline]
    pub unsafe fn beginTransmission1(&mut self, arg1: ::core::ffi::c_int) {
        TwoWire_beginTransmission1(self, arg1)
    }
    #[inline]
    pub unsafe fn endTransmission(&mut self) -> u8 {
        TwoWire_endTransmission(self)
    }
    #[inline]
    pub unsafe fn endTransmission1(&mut self, arg1: u8) -> u8 {
        TwoWire_endTransmission1(self, arg1)
    }
    #[inline]
    pub unsafe fn requestFrom(&mut self, arg1: u8, arg2: u8) -> u8 {
        TwoWire_requestFrom(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom1(&mut self, arg1: u8, arg2: u8, arg3: u8) -> u8 {
        TwoWire_requestFrom1(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn requestFrom2(
        &mut self,
        arg1: u8,
        arg2: u8,
        arg3: u32,
        arg4: u8,
        arg5: u8,
    ) -> u8 {
        TwoWire_requestFrom2(self, arg1, arg2, arg3, arg4, arg5)
    }
    #[inline]
    pub unsafe fn requestFrom3(
        &mut self,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> u8 {
        TwoWire_requestFrom3(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom4(
        &mut self,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> u8 {
        TwoWire_requestFrom4(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn onReceive(
        &mut self,
        arg1: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    ) {
        TwoWire_onReceive(self, arg1)
    }
    #[inline]
    pub unsafe fn onRequest(
        &mut self,
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
    ) {
        TwoWire_onRequest(self, arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        TwoWire_TwoWire(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5writeEh"]
    pub fn TwoWire_write(this: *mut ::core::ffi::c_void, arg1: u8) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5writeEPKhj"]
    pub fn TwoWire_write1(
        this: *mut ::core::ffi::c_void,
        arg1: *const u8,
        arg2: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire9availableEv"]
    pub fn TwoWire_available(this: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire4readEv"]
    pub fn TwoWire_read(this: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire4peekEv"]
    pub fn TwoWire_peek(this: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7TwoWire5flushEv"]
    pub fn TwoWire_flush(this: *mut ::core::ffi::c_void);
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct LiquidCrystal_I2C {
    pub _base: Print,
    pub _Addr: u8,
    pub _displayfunction: u8,
    pub _displaycontrol: u8,
    pub _displaymode: u8,
    pub _numlines: u8,
    pub _cols: u8,
    pub _rows: u8,
    pub _backlightval: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C5beginEhhh"]
    pub fn LiquidCrystal_I2C_begin(
        this: *mut LiquidCrystal_I2C,
        cols: u8,
        rows: u8,
        charsize: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C5clearEv"]
    pub fn LiquidCrystal_I2C_clear(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C4homeEv"]
    pub fn LiquidCrystal_I2C_home(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9noDisplayEv"]
    pub fn LiquidCrystal_I2C_noDisplay(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C7displayEv"]
    pub fn LiquidCrystal_I2C_display(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C7noBlinkEv"]
    pub fn LiquidCrystal_I2C_noBlink(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C5blinkEv"]
    pub fn LiquidCrystal_I2C_blink(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C8noCursorEv"]
    pub fn LiquidCrystal_I2C_noCursor(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C6cursorEv"]
    pub fn LiquidCrystal_I2C_cursor(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C17scrollDisplayLeftEv"]
    pub fn LiquidCrystal_I2C_scrollDisplayLeft(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C18scrollDisplayRightEv"]
    pub fn LiquidCrystal_I2C_scrollDisplayRight(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9printLeftEv"]
    pub fn LiquidCrystal_I2C_printLeft(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C10printRightEv"]
    pub fn LiquidCrystal_I2C_printRight(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C11leftToRightEv"]
    pub fn LiquidCrystal_I2C_leftToRight(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C11rightToLeftEv"]
    pub fn LiquidCrystal_I2C_rightToLeft(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C14shiftIncrementEv"]
    pub fn LiquidCrystal_I2C_shiftIncrement(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C14shiftDecrementEv"]
    pub fn LiquidCrystal_I2C_shiftDecrement(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C11noBacklightEv"]
    pub fn LiquidCrystal_I2C_noBacklight(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9backlightEv"]
    pub fn LiquidCrystal_I2C_backlight(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C10autoscrollEv"]
    pub fn LiquidCrystal_I2C_autoscroll(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C12noAutoscrollEv"]
    pub fn LiquidCrystal_I2C_noAutoscroll(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C10createCharEhPh"]
    pub fn LiquidCrystal_I2C_createChar(
        this: *mut LiquidCrystal_I2C,
        arg1: u8,
        arg2: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9setCursorEhh"]
    pub fn LiquidCrystal_I2C_setCursor(this: *mut LiquidCrystal_I2C, arg1: u8, arg2: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C7commandEh"]
    pub fn LiquidCrystal_I2C_command(this: *mut LiquidCrystal_I2C, arg1: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C4initEv"]
    pub fn LiquidCrystal_I2C_init(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    ///compatibility API function aliases
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C8blink_onEv"]
    pub fn LiquidCrystal_I2C_blink_on(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9blink_offEv"]
    pub fn LiquidCrystal_I2C_blink_off(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C9cursor_onEv"]
    pub fn LiquidCrystal_I2C_cursor_on(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C10cursor_offEv"]
    pub fn LiquidCrystal_I2C_cursor_off(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C12setBacklightEh"]
    pub fn LiquidCrystal_I2C_setBacklight(this: *mut LiquidCrystal_I2C, new_val: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C21load_custom_characterEhPh"]
    pub fn LiquidCrystal_I2C_load_custom_character(
        this: *mut LiquidCrystal_I2C,
        char_num: u8,
        rows: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C8printstrEPKc"]
    pub fn LiquidCrystal_I2C_printstr(
        this: *mut LiquidCrystal_I2C,
        arg1: *const ::core::ffi::c_char,
    );
}
extern "C" {
    ///Unsupported API functions (not implemented in this library)
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C6statusEv"]
    pub fn LiquidCrystal_I2C_status(this: *mut LiquidCrystal_I2C) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C11setContrastEh"]
    pub fn LiquidCrystal_I2C_setContrast(this: *mut LiquidCrystal_I2C, new_val: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C6keypadEv"]
    pub fn LiquidCrystal_I2C_keypad(this: *mut LiquidCrystal_I2C) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C8setDelayEii"]
    pub fn LiquidCrystal_I2C_setDelay(
        this: *mut LiquidCrystal_I2C,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C2onEv"]
    pub fn LiquidCrystal_I2C_on(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C3offEv"]
    pub fn LiquidCrystal_I2C_off(this: *mut LiquidCrystal_I2C);
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C13init_bargraphEh"]
    pub fn LiquidCrystal_I2C_init_bargraph(
        this: *mut LiquidCrystal_I2C,
        graphtype: u8,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C21draw_horizontal_graphEhhhh"]
    pub fn LiquidCrystal_I2C_draw_horizontal_graph(
        this: *mut LiquidCrystal_I2C,
        row: u8,
        column: u8,
        len: u8,
        pixel_col_end: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C19draw_vertical_graphEhhhh"]
    pub fn LiquidCrystal_I2C_draw_vertical_graph(
        this: *mut LiquidCrystal_I2C,
        row: u8,
        column: u8,
        len: u8,
        pixel_col_end: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2CC1Ehhh"]
    pub fn LiquidCrystal_I2C_LiquidCrystal_I2C(
        this: *mut LiquidCrystal_I2C,
        lcd_Addr: u8,
        lcd_cols: u8,
        lcd_rows: u8,
    );
}
impl LiquidCrystal_I2C {
    #[inline]
    pub unsafe fn begin(&mut self, cols: u8, rows: u8, charsize: u8) {
        LiquidCrystal_I2C_begin(self, cols, rows, charsize)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        LiquidCrystal_I2C_clear(self)
    }
    #[inline]
    pub unsafe fn home(&mut self) {
        LiquidCrystal_I2C_home(self)
    }
    #[inline]
    pub unsafe fn noDisplay(&mut self) {
        LiquidCrystal_I2C_noDisplay(self)
    }
    #[inline]
    pub unsafe fn display(&mut self) {
        LiquidCrystal_I2C_display(self)
    }
    #[inline]
    pub unsafe fn noBlink(&mut self) {
        LiquidCrystal_I2C_noBlink(self)
    }
    #[inline]
    pub unsafe fn blink(&mut self) {
        LiquidCrystal_I2C_blink(self)
    }
    #[inline]
    pub unsafe fn noCursor(&mut self) {
        LiquidCrystal_I2C_noCursor(self)
    }
    #[inline]
    pub unsafe fn cursor(&mut self) {
        LiquidCrystal_I2C_cursor(self)
    }
    #[inline]
    pub unsafe fn scrollDisplayLeft(&mut self) {
        LiquidCrystal_I2C_scrollDisplayLeft(self)
    }
    #[inline]
    pub unsafe fn scrollDisplayRight(&mut self) {
        LiquidCrystal_I2C_scrollDisplayRight(self)
    }
    #[inline]
    pub unsafe fn printLeft(&mut self) {
        LiquidCrystal_I2C_printLeft(self)
    }
    #[inline]
    pub unsafe fn printRight(&mut self) {
        LiquidCrystal_I2C_printRight(self)
    }
    #[inline]
    pub unsafe fn leftToRight(&mut self) {
        LiquidCrystal_I2C_leftToRight(self)
    }
    #[inline]
    pub unsafe fn rightToLeft(&mut self) {
        LiquidCrystal_I2C_rightToLeft(self)
    }
    #[inline]
    pub unsafe fn shiftIncrement(&mut self) {
        LiquidCrystal_I2C_shiftIncrement(self)
    }
    #[inline]
    pub unsafe fn shiftDecrement(&mut self) {
        LiquidCrystal_I2C_shiftDecrement(self)
    }
    #[inline]
    pub unsafe fn noBacklight(&mut self) {
        LiquidCrystal_I2C_noBacklight(self)
    }
    #[inline]
    pub unsafe fn backlight(&mut self) {
        LiquidCrystal_I2C_backlight(self)
    }
    #[inline]
    pub unsafe fn autoscroll(&mut self) {
        LiquidCrystal_I2C_autoscroll(self)
    }
    #[inline]
    pub unsafe fn noAutoscroll(&mut self) {
        LiquidCrystal_I2C_noAutoscroll(self)
    }
    #[inline]
    pub unsafe fn createChar(&mut self, arg1: u8, arg2: *mut u8) {
        LiquidCrystal_I2C_createChar(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn setCursor(&mut self, arg1: u8, arg2: u8) {
        LiquidCrystal_I2C_setCursor(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn command(&mut self, arg1: u8) {
        LiquidCrystal_I2C_command(self, arg1)
    }
    #[inline]
    pub unsafe fn init(&mut self) {
        LiquidCrystal_I2C_init(self)
    }
    #[inline]
    pub unsafe fn blink_on(&mut self) {
        LiquidCrystal_I2C_blink_on(self)
    }
    #[inline]
    pub unsafe fn blink_off(&mut self) {
        LiquidCrystal_I2C_blink_off(self)
    }
    #[inline]
    pub unsafe fn cursor_on(&mut self) {
        LiquidCrystal_I2C_cursor_on(self)
    }
    #[inline]
    pub unsafe fn cursor_off(&mut self) {
        LiquidCrystal_I2C_cursor_off(self)
    }
    #[inline]
    pub unsafe fn setBacklight(&mut self, new_val: u8) {
        LiquidCrystal_I2C_setBacklight(self, new_val)
    }
    #[inline]
    pub unsafe fn load_custom_character(&mut self, char_num: u8, rows: *mut u8) {
        LiquidCrystal_I2C_load_custom_character(self, char_num, rows)
    }
    #[inline]
    pub unsafe fn printstr(&mut self, arg1: *const ::core::ffi::c_char) {
        LiquidCrystal_I2C_printstr(self, arg1)
    }
    #[inline]
    pub unsafe fn status(&mut self) -> u8 {
        LiquidCrystal_I2C_status(self)
    }
    #[inline]
    pub unsafe fn setContrast(&mut self, new_val: u8) {
        LiquidCrystal_I2C_setContrast(self, new_val)
    }
    #[inline]
    pub unsafe fn keypad(&mut self) -> u8 {
        LiquidCrystal_I2C_keypad(self)
    }
    #[inline]
    pub unsafe fn setDelay(
        &mut self,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) {
        LiquidCrystal_I2C_setDelay(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn on(&mut self) {
        LiquidCrystal_I2C_on(self)
    }
    #[inline]
    pub unsafe fn off(&mut self) {
        LiquidCrystal_I2C_off(self)
    }
    #[inline]
    pub unsafe fn init_bargraph(&mut self, graphtype: u8) -> u8 {
        LiquidCrystal_I2C_init_bargraph(self, graphtype)
    }
    #[inline]
    pub unsafe fn draw_horizontal_graph(
        &mut self,
        row: u8,
        column: u8,
        len: u8,
        pixel_col_end: u8,
    ) {
        LiquidCrystal_I2C_draw_horizontal_graph(self, row, column, len, pixel_col_end)
    }
    #[inline]
    pub unsafe fn draw_vertical_graph(
        &mut self,
        row: u8,
        column: u8,
        len: u8,
        pixel_col_end: u8,
    ) {
        LiquidCrystal_I2C_draw_vertical_graph(self, row, column, len, pixel_col_end)
    }
    #[inline]
    pub unsafe fn new(lcd_Addr: u8, lcd_cols: u8, lcd_rows: u8) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        LiquidCrystal_I2C_LiquidCrystal_I2C(
            __bindgen_tmp.as_mut_ptr(),
            lcd_Addr,
            lcd_cols,
            lcd_rows,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17LiquidCrystal_I2C5writeEh"]
    pub fn LiquidCrystal_I2C_write(this: *mut ::core::ffi::c_void, arg1: u8) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPISettings {
    pub spcr: u8,
    pub spsr: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIClass {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass11initializedE"]
    pub static mut SPIClass_initialized: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass13interruptModeE"]
    pub static mut SPIClass_interruptMode: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass13interruptMaskE"]
    pub static mut SPIClass_interruptMask: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass13interruptSaveE"]
    pub static mut SPIClass_interruptSave: u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass5beginEv"]
    pub fn SPIClass_begin();
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass14usingInterruptEh"]
    pub fn SPIClass_usingInterrupt(interruptNumber: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass17notUsingInterruptEh"]
    pub fn SPIClass_notUsingInterrupt(interruptNumber: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN8SPIClass3endEv"]
    pub fn SPIClass_end();
}
impl SPIClass {
    #[inline]
    pub unsafe fn begin() {
        SPIClass_begin()
    }
    #[inline]
    pub unsafe fn usingInterrupt(interruptNumber: u8) {
        SPIClass_usingInterrupt(interruptNumber)
    }
    #[inline]
    pub unsafe fn notUsingInterrupt(interruptNumber: u8) {
        SPIClass_notUsingInterrupt(interruptNumber)
    }
    #[inline]
    pub unsafe fn end() {
        SPIClass_end()
    }
}
/// Font data stored PER GLYPH
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFXglyph {
    ///< Pointer into GFXfont->bitmap
    pub bitmapOffset: u16,
    ///< Bitmap dimensions in pixels
    pub width: u8,
    ///< Bitmap dimensions in pixels
    pub height: u8,
    ///< Distance to advance cursor (x axis)
    pub xAdvance: u8,
    ///< X dist from cursor pos to UL corner
    pub xOffset: i8,
    ///< Y dist from cursor pos to UL corner
    pub yOffset: i8,
}
/// Data stored for FONT AS A WHOLE
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFXfont {
    ///< Glyph bitmaps, concatenated
    pub bitmap: *mut u8,
    ///< Glyph array
    pub glyph: *mut GFXglyph,
    ///< ASCII extents (first char)
    pub first: u16,
    ///< ASCII extents (last char)
    pub last: u16,
    ///< Newline distance (y axis)
    pub yAdvance: u8,
}
/** A generic graphics superclass that can handle all sorts of drawing. At a
 minimum you can subclass and provide drawPixel(). At a maximum you can do a
 ton of overriding to optimize. Used for any/all Adafruit displays!*/
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Adafruit_GFX {
    pub _base: Print,
    ///< This is the 'raw' display width - never changes
    pub WIDTH: i16,
    ///< This is the 'raw' display height - never changes
    pub HEIGHT: i16,
    ///< Display width as modified by current rotation
    pub _width: i16,
    ///< Display height as modified by current rotation
    pub _height: i16,
    ///< x location to start print()ing text
    pub cursor_x: i16,
    ///< y location to start print()ing text
    pub cursor_y: i16,
    ///< 16-bit background color for print()
    pub textcolor: u16,
    ///< 16-bit text color for print()
    pub textbgcolor: u16,
    ///< Desired magnification in X-axis of text to print()
    pub textsize_x: u8,
    ///< Desired magnification in Y-axis of text to print()
    pub textsize_y: u8,
    ///< Display rotation (0 thru 3)
    pub rotation: u8,
    ///< If set, 'wrap' text at right edge of display
    pub wrap: bool,
    ///< If set, use correct CP437 charset (default is off)
    pub _cp437: bool,
    ///< Pointer to special font
    pub gfxFont: *mut GFXfont,
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10drawCircleEiiij"]
    pub fn Adafruit_GFX_drawCircle(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        r: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX16drawCircleHelperEiiihj"]
    pub fn Adafruit_GFX_drawCircleHelper(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        r: i16,
        cornername: u8,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10fillCircleEiiij"]
    pub fn Adafruit_GFX_fillCircle(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        r: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX16fillCircleHelperEiiihij"]
    pub fn Adafruit_GFX_fillCircleHelper(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        r: i16,
        cornername: u8,
        delta: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX12drawTriangleEiiiiiij"]
    pub fn Adafruit_GFX_drawTriangle(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        x2: i16,
        y2: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX12fillTriangleEiiiiiij"]
    pub fn Adafruit_GFX_fillTriangle(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        x2: i16,
        y2: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawRoundRectEiiiiij"]
    pub fn Adafruit_GFX_drawRoundRect(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        w: i16,
        h: i16,
        radius: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13fillRoundRectEiiiiij"]
    pub fn Adafruit_GFX_fillRoundRect(
        this: *mut Adafruit_GFX,
        x0: i16,
        y0: i16,
        w: i16,
        h: i16,
        radius: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10drawBitmapEiiPKhiij"]
    pub fn Adafruit_GFX_drawBitmap(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10drawBitmapEiiPKhiijj"]
    pub fn Adafruit_GFX_drawBitmap1(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
        bg: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10drawBitmapEiiPhiij"]
    pub fn Adafruit_GFX_drawBitmap2(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10drawBitmapEiiPhiijj"]
    pub fn Adafruit_GFX_drawBitmap3(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
        color: u16,
        bg: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX11drawXBitmapEiiPKhiij"]
    pub fn Adafruit_GFX_drawXBitmap(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX19drawGrayscaleBitmapEiiPKhii"]
    pub fn Adafruit_GFX_drawGrayscaleBitmap(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX19drawGrayscaleBitmapEiiPhii"]
    pub fn Adafruit_GFX_drawGrayscaleBitmap1(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX19drawGrayscaleBitmapEiiPKhS1_ii"]
    pub fn Adafruit_GFX_drawGrayscaleBitmap2(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u8,
        mask: *const u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX19drawGrayscaleBitmapEiiPhS0_ii"]
    pub fn Adafruit_GFX_drawGrayscaleBitmap3(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        mask: *mut u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawRGBBitmapEiiPKjii"]
    pub fn Adafruit_GFX_drawRGBBitmap(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u16,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawRGBBitmapEiiPjii"]
    pub fn Adafruit_GFX_drawRGBBitmap1(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u16,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawRGBBitmapEiiPKjPKhii"]
    pub fn Adafruit_GFX_drawRGBBitmap2(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *const u16,
        mask: *const u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawRGBBitmapEiiPjPhii"]
    pub fn Adafruit_GFX_drawRGBBitmap3(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        bitmap: *mut u16,
        mask: *mut u8,
        w: i16,
        h: i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8drawCharEiihjjh"]
    pub fn Adafruit_GFX_drawChar(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        c: ::core::ffi::c_uchar,
        color: u16,
        bg: u16,
        size: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8drawCharEiihjjhh"]
    pub fn Adafruit_GFX_drawChar1(
        this: *mut Adafruit_GFX,
        x: i16,
        y: i16,
        c: ::core::ffi::c_uchar,
        color: u16,
        bg: u16,
        size_x: u8,
        size_y: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13getTextBoundsEPKciiPiS2_PjS3_"]
    pub fn Adafruit_GFX_getTextBounds(
        this: *mut Adafruit_GFX,
        string: *const ::core::ffi::c_char,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13getTextBoundsEPK19__FlashStringHelperiiPiS3_PjS4_"]
    pub fn Adafruit_GFX_getTextBounds1(
        this: *mut Adafruit_GFX,
        s: *const __FlashStringHelper,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13getTextBoundsERK6StringiiPiS3_PjS4_"]
    pub fn Adafruit_GFX_getTextBounds2(
        this: *mut Adafruit_GFX,
        str_: *const String,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX11setTextSizeEh"]
    pub fn Adafruit_GFX_setTextSize(this: *mut Adafruit_GFX, s: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX11setTextSizeEhh"]
    pub fn Adafruit_GFX_setTextSize1(this: *mut Adafruit_GFX, sx: u8, sy: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX7setFontEPK7GFXfont"]
    pub fn Adafruit_GFX_setFont(this: *mut Adafruit_GFX, f: *const GFXfont);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10charBoundsEhPiS0_S0_S0_S0_S0_"]
    pub fn Adafruit_GFX_charBounds(
        this: *mut Adafruit_GFX,
        c: ::core::ffi::c_uchar,
        x: *mut i16,
        y: *mut i16,
        minx: *mut i16,
        miny: *mut i16,
        maxx: *mut i16,
        maxy: *mut i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFXC2Eii"]
    pub fn Adafruit_GFX_Adafruit_GFX(this: *mut Adafruit_GFX, w: i16, h: i16);
}
impl Adafruit_GFX {
    #[inline]
    pub unsafe fn drawCircle(&mut self, x0: i16, y0: i16, r: i16, color: u16) {
        Adafruit_GFX_drawCircle(self, x0, y0, r, color)
    }
    #[inline]
    pub unsafe fn drawCircleHelper(
        &mut self,
        x0: i16,
        y0: i16,
        r: i16,
        cornername: u8,
        color: u16,
    ) {
        Adafruit_GFX_drawCircleHelper(self, x0, y0, r, cornername, color)
    }
    #[inline]
    pub unsafe fn fillCircle(&mut self, x0: i16, y0: i16, r: i16, color: u16) {
        Adafruit_GFX_fillCircle(self, x0, y0, r, color)
    }
    #[inline]
    pub unsafe fn fillCircleHelper(
        &mut self,
        x0: i16,
        y0: i16,
        r: i16,
        cornername: u8,
        delta: i16,
        color: u16,
    ) {
        Adafruit_GFX_fillCircleHelper(self, x0, y0, r, cornername, delta, color)
    }
    #[inline]
    pub unsafe fn drawTriangle(
        &mut self,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        x2: i16,
        y2: i16,
        color: u16,
    ) {
        Adafruit_GFX_drawTriangle(self, x0, y0, x1, y1, x2, y2, color)
    }
    #[inline]
    pub unsafe fn fillTriangle(
        &mut self,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        x2: i16,
        y2: i16,
        color: u16,
    ) {
        Adafruit_GFX_fillTriangle(self, x0, y0, x1, y1, x2, y2, color)
    }
    #[inline]
    pub unsafe fn drawRoundRect(
        &mut self,
        x0: i16,
        y0: i16,
        w: i16,
        h: i16,
        radius: i16,
        color: u16,
    ) {
        Adafruit_GFX_drawRoundRect(self, x0, y0, w, h, radius, color)
    }
    #[inline]
    pub unsafe fn fillRoundRect(
        &mut self,
        x0: i16,
        y0: i16,
        w: i16,
        h: i16,
        radius: i16,
        color: u16,
    ) {
        Adafruit_GFX_fillRoundRect(self, x0, y0, w, h, radius, color)
    }
    #[inline]
    pub unsafe fn drawBitmap(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
    ) {
        Adafruit_GFX_drawBitmap(self, x, y, bitmap, w, h, color)
    }
    #[inline]
    pub unsafe fn drawBitmap1(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
        bg: u16,
    ) {
        Adafruit_GFX_drawBitmap1(self, x, y, bitmap, w, h, color, bg)
    }
    #[inline]
    pub unsafe fn drawBitmap2(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
        color: u16,
    ) {
        Adafruit_GFX_drawBitmap2(self, x, y, bitmap, w, h, color)
    }
    #[inline]
    pub unsafe fn drawBitmap3(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
        color: u16,
        bg: u16,
    ) {
        Adafruit_GFX_drawBitmap3(self, x, y, bitmap, w, h, color, bg)
    }
    #[inline]
    pub unsafe fn drawXBitmap(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
        color: u16,
    ) {
        Adafruit_GFX_drawXBitmap(self, x, y, bitmap, w, h, color)
    }
    #[inline]
    pub unsafe fn drawGrayscaleBitmap(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawGrayscaleBitmap(self, x, y, bitmap, w, h)
    }
    #[inline]
    pub unsafe fn drawGrayscaleBitmap1(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawGrayscaleBitmap1(self, x, y, bitmap, w, h)
    }
    #[inline]
    pub unsafe fn drawGrayscaleBitmap2(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u8,
        mask: *const u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawGrayscaleBitmap2(self, x, y, bitmap, mask, w, h)
    }
    #[inline]
    pub unsafe fn drawGrayscaleBitmap3(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u8,
        mask: *mut u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawGrayscaleBitmap3(self, x, y, bitmap, mask, w, h)
    }
    #[inline]
    pub unsafe fn drawRGBBitmap(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u16,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawRGBBitmap(self, x, y, bitmap, w, h)
    }
    #[inline]
    pub unsafe fn drawRGBBitmap1(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u16,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawRGBBitmap1(self, x, y, bitmap, w, h)
    }
    #[inline]
    pub unsafe fn drawRGBBitmap2(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *const u16,
        mask: *const u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawRGBBitmap2(self, x, y, bitmap, mask, w, h)
    }
    #[inline]
    pub unsafe fn drawRGBBitmap3(
        &mut self,
        x: i16,
        y: i16,
        bitmap: *mut u16,
        mask: *mut u8,
        w: i16,
        h: i16,
    ) {
        Adafruit_GFX_drawRGBBitmap3(self, x, y, bitmap, mask, w, h)
    }
    #[inline]
    pub unsafe fn drawChar(
        &mut self,
        x: i16,
        y: i16,
        c: ::core::ffi::c_uchar,
        color: u16,
        bg: u16,
        size: u8,
    ) {
        Adafruit_GFX_drawChar(self, x, y, c, color, bg, size)
    }
    #[inline]
    pub unsafe fn drawChar1(
        &mut self,
        x: i16,
        y: i16,
        c: ::core::ffi::c_uchar,
        color: u16,
        bg: u16,
        size_x: u8,
        size_y: u8,
    ) {
        Adafruit_GFX_drawChar1(self, x, y, c, color, bg, size_x, size_y)
    }
    #[inline]
    pub unsafe fn getTextBounds(
        &mut self,
        string: *const ::core::ffi::c_char,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    ) {
        Adafruit_GFX_getTextBounds(self, string, x, y, x1, y1, w, h)
    }
    #[inline]
    pub unsafe fn getTextBounds1(
        &mut self,
        s: *const __FlashStringHelper,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    ) {
        Adafruit_GFX_getTextBounds1(self, s, x, y, x1, y1, w, h)
    }
    #[inline]
    pub unsafe fn getTextBounds2(
        &mut self,
        str_: *const String,
        x: i16,
        y: i16,
        x1: *mut i16,
        y1: *mut i16,
        w: *mut u16,
        h: *mut u16,
    ) {
        Adafruit_GFX_getTextBounds2(self, str_, x, y, x1, y1, w, h)
    }
    #[inline]
    pub unsafe fn setTextSize(&mut self, s: u8) {
        Adafruit_GFX_setTextSize(self, s)
    }
    #[inline]
    pub unsafe fn setTextSize1(&mut self, sx: u8, sy: u8) {
        Adafruit_GFX_setTextSize1(self, sx, sy)
    }
    #[inline]
    pub unsafe fn setFont(&mut self, f: *const GFXfont) {
        Adafruit_GFX_setFont(self, f)
    }
    #[inline]
    pub unsafe fn charBounds(
        &mut self,
        c: ::core::ffi::c_uchar,
        x: *mut i16,
        y: *mut i16,
        minx: *mut i16,
        miny: *mut i16,
        maxx: *mut i16,
        maxy: *mut i16,
    ) {
        Adafruit_GFX_charBounds(self, c, x, y, minx, miny, maxx, maxy)
    }
    #[inline]
    pub unsafe fn new(w: i16, h: i16) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_GFX_Adafruit_GFX(__bindgen_tmp.as_mut_ptr(), w, h);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10startWriteEv"]
    pub fn Adafruit_GFX_startWrite(this: *mut ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10writePixelEiij"]
    pub fn Adafruit_GFX_writePixel(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13writeFillRectEiiiij"]
    pub fn Adafruit_GFX_writeFillRect(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX14writeFastVLineEiiij"]
    pub fn Adafruit_GFX_writeFastVLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX14writeFastHLineEiiij"]
    pub fn Adafruit_GFX_writeFastHLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX9writeLineEiiiij"]
    pub fn Adafruit_GFX_writeLine(
        this: *mut ::core::ffi::c_void,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8endWriteEv"]
    pub fn Adafruit_GFX_endWrite(this: *mut ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX11setRotationEh"]
    pub fn Adafruit_GFX_setRotation(this: *mut ::core::ffi::c_void, r: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13invertDisplayEb"]
    pub fn Adafruit_GFX_invertDisplay(this: *mut ::core::ffi::c_void, i: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawFastVLineEiiij"]
    pub fn Adafruit_GFX_drawFastVLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX13drawFastHLineEiiij"]
    pub fn Adafruit_GFX_drawFastHLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8fillRectEiiiij"]
    pub fn Adafruit_GFX_fillRect(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX10fillScreenEj"]
    pub fn Adafruit_GFX_fillScreen(this: *mut ::core::ffi::c_void, color: u16);
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8drawLineEiiiij"]
    pub fn Adafruit_GFX_drawLine(
        this: *mut ::core::ffi::c_void,
        x0: i16,
        y0: i16,
        x1: i16,
        y1: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX8drawRectEiiiij"]
    pub fn Adafruit_GFX_drawRect(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12Adafruit_GFX5writeEh"]
    pub fn Adafruit_GFX_write(this: *mut ::core::ffi::c_void, arg1: u8) -> usize;
}
pub type PortReg = u8;
pub type PortMask = u8;
/**@brief  Class that stores state and functions for interacting with
SSD1306 OLED displays.*/
#[repr(C, packed)]
pub struct Adafruit_SSD1306 {
    pub _base: Adafruit_GFX,
    /**< Initialized during construction when using SPI. See
< SPI.cpp, SPI.h*/
    pub spi: *mut SPIClass,
    /**< Initialized during construction when using I2C. See
< Wire.cpp, Wire.h*/
    pub wire: *mut TwoWire,
    /**< Buffer data used for display buffer. Allocated when
< begin method is called.*/
    pub buffer: *mut u8,
    ///< I2C address initialized when begin method is called.
    pub i2caddr: i8,
    ///< VCC selection, set by begin method.
    pub vccstate: i8,
    ///< not used
    pub page_end: i8,
    /**< (Master Out Slave In) set when using SPI set during
< construction.*/
    pub mosiPin: i8,
    ///< (Clock Pin) set when using SPI set during construction.
    pub clkPin: i8,
    ///< (Data Pin) set when using SPI set during construction.
    pub dcPin: i8,
    ///< (Chip Select Pin) set when using SPI set during construction.
    pub csPin: i8,
    ///< Display reset pin assignment. Set during construction.
    pub rstPin: i8,
    pub mosiPort: *mut PortReg,
    pub clkPort: *mut PortReg,
    pub dcPort: *mut PortReg,
    pub csPort: *mut PortReg,
    pub mosiPinMask: PortMask,
    pub clkPinMask: PortMask,
    pub dcPinMask: PortMask,
    pub csPinMask: PortMask,
    ///< Wire speed for SSD1306 transfers
    pub wireClk: u32,
    ///< Wire speed following SSD1306 transfers
    pub restoreClk: u32,
    ///< normal contrast setting for this device
    pub contrast: u8,
    pub spiSettings: SPISettings,
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13065beginEhhbb"]
    pub fn Adafruit_SSD1306_begin(
        this: *mut Adafruit_SSD1306,
        switchvcc: u8,
        i2caddr: u8,
        reset: bool,
        periphBegin: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13067displayEv"]
    pub fn Adafruit_SSD1306_display(this: *mut Adafruit_SSD1306);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130612clearDisplayEv"]
    pub fn Adafruit_SSD1306_clearDisplay(this: *mut Adafruit_SSD1306);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13063dimEb"]
    pub fn Adafruit_SSD1306_dim(this: *mut Adafruit_SSD1306, dim: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130616startscrollrightEhh"]
    pub fn Adafruit_SSD1306_startscrollright(
        this: *mut Adafruit_SSD1306,
        start: u8,
        stop: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130615startscrollleftEhh"]
    pub fn Adafruit_SSD1306_startscrollleft(
        this: *mut Adafruit_SSD1306,
        start: u8,
        stop: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130620startscrolldiagrightEhh"]
    pub fn Adafruit_SSD1306_startscrolldiagright(
        this: *mut Adafruit_SSD1306,
        start: u8,
        stop: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130619startscrolldiagleftEhh"]
    pub fn Adafruit_SSD1306_startscrolldiagleft(
        this: *mut Adafruit_SSD1306,
        start: u8,
        stop: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130610stopscrollEv"]
    pub fn Adafruit_SSD1306_stopscroll(this: *mut Adafruit_SSD1306);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130615ssd1306_commandEh"]
    pub fn Adafruit_SSD1306_ssd1306_command(this: *mut Adafruit_SSD1306, c: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13068getPixelEii"]
    pub fn Adafruit_SSD1306_getPixel(
        this: *mut Adafruit_SSD1306,
        x: i16,
        y: i16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13069getBufferEv"]
    pub fn Adafruit_SSD1306_getBuffer(this: *mut Adafruit_SSD1306) -> *mut u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij"]
    pub fn Adafruit_SSD1306_drawFastHLineInternal(
        this: *mut Adafruit_SSD1306,
        x: i16,
        y: i16,
        w: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij"]
    pub fn Adafruit_SSD1306_drawFastVLineInternal(
        this: *mut Adafruit_SSD1306,
        x: i16,
        y: i16,
        h: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130616ssd1306_command1Eh"]
    pub fn Adafruit_SSD1306_ssd1306_command1(this: *mut Adafruit_SSD1306, c: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh"]
    pub fn Adafruit_SSD1306_ssd1306_commandList(
        this: *mut Adafruit_SSD1306,
        c: *const u8,
        n: u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm"]
    pub fn Adafruit_SSD1306_Adafruit_SSD1306(
        this: *mut Adafruit_SSD1306,
        w: u8,
        h: u8,
        twi: *mut TwoWire,
        rst_pin: i8,
        clkDuring: u32,
        clkAfter: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1Ehhaaaaa"]
    pub fn Adafruit_SSD1306_Adafruit_SSD13061(
        this: *mut Adafruit_SSD1306,
        w: u8,
        h: u8,
        mosi_pin: i8,
        sclk_pin: i8,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1EhhP8SPIClassaaam"]
    pub fn Adafruit_SSD1306_Adafruit_SSD13062(
        this: *mut Adafruit_SSD1306,
        w: u8,
        h: u8,
        spi: *mut SPIClass,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
        bitrate: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1Eaaaaa"]
    pub fn Adafruit_SSD1306_Adafruit_SSD13063(
        this: *mut Adafruit_SSD1306,
        mosi_pin: i8,
        sclk_pin: i8,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1Eaaa"]
    pub fn Adafruit_SSD1306_Adafruit_SSD13064(
        this: *mut Adafruit_SSD1306,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306C1Ea"]
    pub fn Adafruit_SSD1306_Adafruit_SSD13065(this: *mut Adafruit_SSD1306, rst_pin: i8);
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD1306D1Ev"]
    pub fn Adafruit_SSD1306_Adafruit_SSD1306_destructor(this: *mut Adafruit_SSD1306);
}
impl Adafruit_SSD1306 {
    #[inline]
    pub unsafe fn begin(
        &mut self,
        switchvcc: u8,
        i2caddr: u8,
        reset: bool,
        periphBegin: bool,
    ) -> bool {
        Adafruit_SSD1306_begin(self, switchvcc, i2caddr, reset, periphBegin)
    }
    #[inline]
    pub unsafe fn display(&mut self) {
        Adafruit_SSD1306_display(self)
    }
    #[inline]
    pub unsafe fn clearDisplay(&mut self) {
        Adafruit_SSD1306_clearDisplay(self)
    }
    #[inline]
    pub unsafe fn dim(&mut self, dim: bool) {
        Adafruit_SSD1306_dim(self, dim)
    }
    #[inline]
    pub unsafe fn startscrollright(&mut self, start: u8, stop: u8) {
        Adafruit_SSD1306_startscrollright(self, start, stop)
    }
    #[inline]
    pub unsafe fn startscrollleft(&mut self, start: u8, stop: u8) {
        Adafruit_SSD1306_startscrollleft(self, start, stop)
    }
    #[inline]
    pub unsafe fn startscrolldiagright(&mut self, start: u8, stop: u8) {
        Adafruit_SSD1306_startscrolldiagright(self, start, stop)
    }
    #[inline]
    pub unsafe fn startscrolldiagleft(&mut self, start: u8, stop: u8) {
        Adafruit_SSD1306_startscrolldiagleft(self, start, stop)
    }
    #[inline]
    pub unsafe fn stopscroll(&mut self) {
        Adafruit_SSD1306_stopscroll(self)
    }
    #[inline]
    pub unsafe fn ssd1306_command(&mut self, c: u8) {
        Adafruit_SSD1306_ssd1306_command(self, c)
    }
    #[inline]
    pub unsafe fn getPixel(&mut self, x: i16, y: i16) -> bool {
        Adafruit_SSD1306_getPixel(self, x, y)
    }
    #[inline]
    pub unsafe fn getBuffer(&mut self) -> *mut u8 {
        Adafruit_SSD1306_getBuffer(self)
    }
    #[inline]
    pub unsafe fn drawFastHLineInternal(&mut self, x: i16, y: i16, w: i16, color: u16) {
        Adafruit_SSD1306_drawFastHLineInternal(self, x, y, w, color)
    }
    #[inline]
    pub unsafe fn drawFastVLineInternal(&mut self, x: i16, y: i16, h: i16, color: u16) {
        Adafruit_SSD1306_drawFastVLineInternal(self, x, y, h, color)
    }
    #[inline]
    pub unsafe fn ssd1306_command1(&mut self, c: u8) {
        Adafruit_SSD1306_ssd1306_command1(self, c)
    }
    #[inline]
    pub unsafe fn ssd1306_commandList(&mut self, c: *const u8, n: u8) {
        Adafruit_SSD1306_ssd1306_commandList(self, c, n)
    }
    #[inline]
    pub unsafe fn new(
        w: u8,
        h: u8,
        twi: *mut TwoWire,
        rst_pin: i8,
        clkDuring: u32,
        clkAfter: u32,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD1306(
            __bindgen_tmp.as_mut_ptr(),
            w,
            h,
            twi,
            rst_pin,
            clkDuring,
            clkAfter,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        w: u8,
        h: u8,
        mosi_pin: i8,
        sclk_pin: i8,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD13061(
            __bindgen_tmp.as_mut_ptr(),
            w,
            h,
            mosi_pin,
            sclk_pin,
            dc_pin,
            rst_pin,
            cs_pin,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        w: u8,
        h: u8,
        spi: *mut SPIClass,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
        bitrate: u32,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD13062(
            __bindgen_tmp.as_mut_ptr(),
            w,
            h,
            spi,
            dc_pin,
            rst_pin,
            cs_pin,
            bitrate,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        mosi_pin: i8,
        sclk_pin: i8,
        dc_pin: i8,
        rst_pin: i8,
        cs_pin: i8,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD13063(
            __bindgen_tmp.as_mut_ptr(),
            mosi_pin,
            sclk_pin,
            dc_pin,
            rst_pin,
            cs_pin,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(dc_pin: i8, rst_pin: i8, cs_pin: i8) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD13064(
            __bindgen_tmp.as_mut_ptr(),
            dc_pin,
            rst_pin,
            cs_pin,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(rst_pin: i8) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Adafruit_SSD1306_Adafruit_SSD13065(__bindgen_tmp.as_mut_ptr(), rst_pin);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Adafruit_SSD1306_Adafruit_SSD1306_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130613drawFastHLineEiiij"]
    pub fn Adafruit_SSD1306_drawFastHLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        w: i16,
        color: u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130613drawFastVLineEiiij"]
    pub fn Adafruit_SSD1306_drawFastVLine(
        this: *mut ::core::ffi::c_void,
        x: i16,
        y: i16,
        h: i16,
        color: u16,
    );
}
