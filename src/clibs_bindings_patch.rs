use crate::clibs_bindings::{Adafruit_SSD1306, Serial_};

#[allow(dead_code)]
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD13069drawPixelEiij"]
    pub fn Adafruit_SSD1306_drawPixel(this: *mut Adafruit_SSD1306, x: i16, y: i16, color: u16);
}

#[allow(dead_code)]
impl Adafruit_SSD1306 {
    #[inline]
    pub unsafe fn drawPixel(&mut self, x: i16, y: i16, color: u16) { Adafruit_SSD1306_drawPixel(self, x, y, color) }
}


/*
When function-impl is not generated by build.rs/bindgen:
1: Copy the extern declaration from clibs_bindings.rs to clibs_bindings_patch.rs
2: Create/Copy/Paste/Edit at will the implementation
3: Add function to the blocklist_function: in clibs_bindings.yaml
 */
/*
1:
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130613invertDisplayEb"]
    pub fn Adafruit_SSD1306_invertDisplay(this: *mut ::core::ffi::c_void, i: bool);
}
2:
impl Adafruit_SSD1306 {
    #[inline]
    pub unsafe fn invertDisplay(&mut self, i: bool) { Adafruit_SSD1306_invertDisplay(self, i) } // this: *mut ::core::ffi::c_void
}
3:
blocklist_function:
- Adafruit_SSD1306_invertDisplay.*
*/

#[allow(dead_code)]
extern "C" {
    #[link_name = "\u{1}_ZN16Adafruit_SSD130613invertDisplayEb"]
    pub fn Adafruit_SSD1306_invertDisplay(this: *mut Adafruit_SSD1306, i: bool);
}

#[allow(dead_code)]
impl Adafruit_SSD1306 {
    #[inline]
    pub unsafe fn invertDisplay(&mut self, i: bool) { Adafruit_SSD1306_invertDisplay(self, i) } // this: *mut ::core::ffi::c_void
}


extern "C" {
    #[link_name = "\u{1}_ZN7Serial_cvbEv"]
    pub fn Serial__Serial_(this: *mut Serial_);
}

extern "C" {
    #[link_name = "\u{1}_ZN7Serial_5writeEh"]
    pub fn Serial__write(
        this: *mut Serial_,
        arg1: usize,
    ) -> usize;
}

extern "C" {
    #[link_name = "\u{1}_ZN7Serial_5writeEPKhj"]
    pub fn Serial__write1(
        this: *mut Serial_,
        arg1: *const u8,
        arg2: usize,
    ) -> usize;
}


#[allow(dead_code)]
impl Serial_ {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        Serial__Serial_(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }

    #[inline]
    pub unsafe fn write(&mut self, arg1: usize) -> usize{
        Serial__write(self, arg1)
    }

    #[inline]
    pub unsafe fn write1(&mut self, arg1: *const u8, arg2: usize) -> usize{
        Serial__write1(self, arg1, arg2)
    }
}